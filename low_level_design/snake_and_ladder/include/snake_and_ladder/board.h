#pragma once
#include <vector>

/**
 * @brief Доска хранит состояние клеток. В клетке может быть змея, лестница или фишка.
 * На доске 10 змей и лестниц.
 * Начало лестницы на клетке меньше, чем конец.
 * Голова змеи на клетке больше, чем хвост змеи.
 *
 * У доски можно спросить: находится ли голова змеи в текущей позиции?
 * находится ли начало лестницы в текущей позиции?
 * вышел ли игрок за границы доски.
 *
 */
class Board {
public:
  Board(int size);
  /**
   * @brief Проверяет содержит ли позиция на доске голову змеи.
   * Если да, то возвращает позицию хвоста змеи, иначе возвращает позицию;
   *
   * @param pos Позиция на доске
   * @return int возвращает позицию хвоста змеи, иначе возвращает позицию;
   */
  int on_snake(int pos);
  /**
   * @brief Проверяет содержит ли позиция на доске начало лестницы.
   * Если да, то возвращает позицию хвоста змеи, иначе возвращает позицию;
   *
   * @param pos Позиция на доске
   * @return int возвращает позицию хвоста змеи, иначе возвращает позицию;
   */
  int on_ladder(int pos);
  /**
   * @brief Проверяет входит ли позиция в размер доски.
   * Если да, то возвращает позицию, иначе возвращает 100 - (позицию - 100);
   *
   * @param pos Позиция на доске
   * @return Возвращает позицию, иначе возвращает 100 - (позицию - 100)
   */
  int out_of_size(int pos);

private:
  int size_;
  std::vector<std::pair<int, int>> snakes_;
  std::vector<std::pair<int, int>> ladders_;
  std::vector<std::vector<int>> ships_;
};
